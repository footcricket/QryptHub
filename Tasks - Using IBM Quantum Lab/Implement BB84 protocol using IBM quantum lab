{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4dbb3cac-8f75-42b3-8774-f7916bb98d76",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alice's generated bitstring: 1010\n",
      "Alice's chosen bases: [1, 0, 1, 0]\n",
      "Bob's chosen bases: [1, 0]\n",
      "Bob's measurement results: 10\n",
      "Matching bases: 2\n",
      "Percentage of matching key bits: 50.0\n"
     ]
    }
   ],
   "source": [
    "# Import necessary libraries\n",
    "from qiskit import QuantumCircuit, Aer, execute\n",
    "from qiskit.visualization import plot_histogram\n",
    "import random\n",
    "\n",
    "# Define the bitstring variable\n",
    "bitstring = '1010'\n",
    "\n",
    "# Set up the quantum circuit with two qubits and two classical bits\n",
    "qc = QuantumCircuit(2, 2)\n",
    "\n",
    "# Alice generates a random bit string and encodes it onto the qubits using one of four possible bases\n",
    "# For example, to encode the first bit in the rectilinear basis, Alice applies an X gate to the first qubit\n",
    "for i in range(2):\n",
    "    if bitstring[i] == '1':\n",
    "        qc.x(i)\n",
    "\n",
    "# Bob randomly chooses a basis for each qubit and measures them\n",
    "# For example, to measure the first qubit in the rectilinear basis, Bob applies an H gate to the first qubit and measures both qubits\n",
    "basis = [random.randint(0, 1) for _ in range(2)]\n",
    "for i in range(2):\n",
    "    if basis[i] == 1:\n",
    "        qc.h(i)\n",
    "\n",
    "qc.measure([0, 1], [0, 1])\n",
    "\n",
    "# Alice and Bob publicly compare which bases they used for each qubit\n",
    "# If they used the same basis, they keep the corresponding bit. Otherwise, they discard it\n",
    "for i in range(2):\n",
    "    if basis[i] == 1:\n",
    "        qc.measure(i, i)\n",
    "    else:\n",
    "        qc.h(i)\n",
    "        qc.measure(i, i)\n",
    "\n",
    "# Simulate the circuit\n",
    "simulator = Aer.get_backend('qasm_simulator')\n",
    "job = execute(qc, simulator, shots=1)\n",
    "result = job.result()\n",
    "counts = result.get_counts()\n",
    "\n",
    "# Extract the measurement results\n",
    "alice_basis = [int(b) for b in bitstring]\n",
    "alice_result = [int(b) for b in bitstring]\n",
    "\n",
    "for i in range(2):\n",
    "    if basis[i] == 0:\n",
    "        alice_result[i] = -1  # Placeholder for bits discarded due to mismatched bases\n",
    "\n",
    "# Display the results\n",
    "print(\"Alice's generated bitstring:\", bitstring)\n",
    "print(\"Alice's chosen bases:\", alice_basis)\n",
    "print(\"Bob's chosen bases:\", basis)\n",
    "print(\"Bob's measurement results:\", [int(k) for k in counts.keys()][0])\n",
    "\n",
    "# Verify if Alice's and Bob's bases match\n",
    "matching_bases = sum(1 for i in range(2) if alice_basis[i] == basis[i])\n",
    "print(\"Matching bases:\", matching_bases)\n",
    "\n",
    "# Calculate the percentage of matching bits\n",
    "matching_bits = sum(1 for i in range(2) if alice_result[i] == int(bitstring[i]))\n",
    "percentage_matching = (matching_bits / matching_bases) * 100\n",
    "print(\"Percentage of matching key bits:\", percentage_matching)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1f19b66b-3893-4766-8600-995c064879c7",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Measurement Results:\n",
      "{'10': 1}\n"
     ]
    }
   ],
   "source": [
    "# Display the results\n",
    "print(\"Measurement Results:\")\n",
    "print(counts)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d1a2f61e-e29d-4c70-9372-327789115ac6",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 538.128x284.278 with 1 Axes>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Visualize the circuit\n",
    "qc.draw(output=\"mpl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a7f6422-a013-4b6d-beac-61269d695247",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
